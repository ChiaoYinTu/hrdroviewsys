<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>桃園北區微水力能源監控系統</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        #map {
            height: 180px;
            width: 100%;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .flow-chart {
            display: grid;
            grid-template-columns: 1fr auto 1fr auto 1fr;
            gap: 15px;
            align-items: center;
            position: relative;
            padding: 20px;
            background: linear-gradient(135deg, #87CEEB 0%, #4682B4 100%);
            border-radius: 15px;
            margin: 15px 0;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        .node {
            text-align: center;
            padding: 15px;
            border: 3px solid #3498db;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.95);
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 12px;
            align-items: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            min-height: 180px;
        }

        .node:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        }
        .node-icon {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .node-content {
            display: flex;
            flex-direction: column;
            text-align: left;
            gap: 8px;
        }

        .node-title {
            font-size: 16px;
            font-weight: bold;
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
            margin-bottom: 5px;
        }

        .node-metric {
            display: flex;
            justify-content: space-between;
            align-items: baseline;
            padding: 4px 8px;
            background: rgba(52, 152, 219, 0.08);
            border-radius: 6px;
            margin: 2px 0;
        }

        .node-metric-label {
            font-size: 11px;
            color: #6c757d;
            font-weight: 600;
        }

        .node-metric-value {
            font-size: 15px;
            font-weight: bold;
            color: #2c3e50;
        }

        .node-main-value {
            font-size: 22px;
            font-weight: bold;
            text-align: center;
            padding: 8px;
            border-radius: 8px;
            margin: 5px 0;
        }
        .arrow {
            width: 0;
            height: 0;
            border-top: 20px solid transparent;
            border-bottom: 20px solid transparent;
            border-left: 35px solid #2980b9;
            animation: flow 2s infinite ease-in-out;
            filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.2));
            justify-self: center;
        }

        @keyframes flow {
            0% { opacity: 0.3; transform: scale(0.8); }
            50% { opacity: 1; transform: scale(1.1); }
            100% { opacity: 0.3; transform: scale(0.8); }
        }

        .arrow.first {
            left: calc(170px + 12px + 20px);
            top: 50%;
            transform: translateY(-50%);
        }

        .arrow.second {
            right: calc(170px + 12px + 20px);
            top: 50%;
            transform: translateY(-50%);
        }

        #battery {
            width: 50px;
            height: 80px;
            border: 3px solid #2c3e50;
            border-radius: 5px;
            position: relative;
            margin: 10px auto;
            background: #ecf0f1;
        }

        #battery-fill {
            position: absolute;
            bottom: 0;
            width: 100%;
            transition: height 0.8s ease, background-color 0.8s ease;
            border-radius: 0 0 2px 2px;
        }

        #battery-head {
            width: 20px;
            height: 8px;
            background: #2c3e50;
            position: absolute;
            top: -8px;
            left: 50%;
            transform: translateX(-50%);
            border-radius: 2px 2px 0 0;
        }

        .chart-container {
            height: 300px;
            width: 100%;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .data-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 12px;
            margin: 15px 0;
        }

        .data-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #dee2e6;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            text-align: center;
        }

        .data-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .data-card-label {
            font-size: 18px;
            color: #6c757d;
            font-weight: bold;
            margin-bottom: 8px;
            text-transform: uppercase;
        }

        .data-card-value {
            font-size: 24px;
            color: #2c3e50;
            font-weight: bold;
        }

        .data-card-unit {
            font-size: 14px;
            color: #6c757d;
            margin-left: 3px;
        }

        .header {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .header h1 {
            font-size: 32px;
            font-weight: bold;
            color: #2c3e50;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
            flex: 1;
            text-align: center;
            margin: 0 20px;
        }

        .vendor-logo {
            max-height: 70px;
            width: auto;
            filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.1));
        }

        .waesco-logo {
            max-height: 150px;
            width: auto;
            filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.1));
        }

        .config-panel {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .config-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .config-group {
            display: flex;
            flex-direction: column;
        }

        .config-group label {
            font-size: 12px;
            color: #6c757d;
            font-weight: bold;
            margin-bottom: 5px;
            text-transform: uppercase;
        }

        .config-group input {
            padding: 10px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
        }

        .config-group input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn-primary {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }

        .status-online {
            background-color: #28a745;
        }

        .status-offline {
            background-color: #dc3545;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .controls-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: white;
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
            gap: 15px;
        }

        .section-title {
            font-size: 20px;
            font-weight: bold;
            color: #2c3e50;
            margin: 25px 0 15px 0;
            padding-bottom: 10px;
            border-bottom: 3px solid #3498db;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 20px;
                margin: 0;
            }

            .vendor-logo, .waesco-logo {
                max-height: 50px;
            }

            .flow-chart {
                grid-template-columns: 1fr;
                gap: 15px;
                padding: 15px;
            }

            .arrow {
                display: none;
            }

            .node {
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .node-icon {
                justify-content: center;
            }

            .node-content {
                text-align: center;
            }

            .node-metric {
                justify-content: center;
                gap: 8px;
            }

            .config-row {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-blue-100 min-h-screen">
    <div class="container mx-auto p-4 max-w-7xl">
        <!-- Header -->
        <div class="header">
            <img src="https://raw.githubusercontent.com/ChiaoYinTu/hrdroviewsys/main/rihding-logo-01.svg" alt="Vendor Logo" class="vendor-logo">
            <h1>⚡桃園北區微水力能源監控系統</h1>
            <img src="https://raw.githubusercontent.com/ChiaoYinTu/hrdroviewsys/main/WAESCO_LAB_Logo2-removebg.png" alt="WAESCO Lab Logo" class="waesco-logo">
        </div>

        <!-- Configuration Panel -->
        <div id="configPanel" class="config-panel">
            <h2 class="text-xl font-bold text-gray-700 mb-4">📡 ThingSpeak 配置</h2>
            <div class="config-row">
                <div class="config-group">
                    <label>Channel 1 ID (Power)</label>
                    <input type="text" id="channelId1" placeholder="輸入 Channel 1 ID">
                </div>
                <div class="config-group">
                    <label>Channel 1 API Key</label>
                    <input type="text" id="apiKey1" placeholder="輸入 Read API Key">
                </div>
                <div class="config-group">
                    <label>Channel 2 ID (Battery)</label>
                    <input type="text" id="channelId2" placeholder="輸入 Channel 2 ID">
                </div>
                <div class="config-group">
                    <label>Channel 2 API Key</label>
                    <input type="text" id="apiKey2" placeholder="輸入 Read API Key">
                </div>
            </div>
            <div class="config-row">
                <div class="config-group">
                    <label>資料點數量</label>
                    <input type="number" id="resultsCount" value="50" min="10" max="200">
                </div>
                <div class="config-group" style="justify-content: flex-end; flex-direction: row; gap: 10px;">
                    <button class="btn btn-primary" onclick="startMonitoring()">開始監控</button>
                    <button class="btn btn-secondary" onclick="stopMonitoring()">停止監控</button>
                </div>
            </div>
        </div>

        <!-- Controls Bar -->
        <div id="controlsBar" class="controls-bar hidden">
            <div class="flex items-center gap-3">
                <span id="statusIndicator" class="status-indicator status-offline"></span>
                <span class="text-sm font-bold text-gray-700">連線狀態: <span id="statusText">離線</span></span>
            </div>
            <div class="flex items-center gap-3">
                <label class="text-sm font-bold text-gray-700">刷新間隔:</label>
                <select id="refreshInterval" class="px-3 py-2 border border-gray-300 rounded-lg">
                    <option value="5000">5 secs</option>
                    <option value="10000">10 secs</option>
                    <option value="15000" selected>15 secs</option>
                    <option value="30000">30 secs</option>
                    <option value="60000">60 secs</option>
                </select>
                <button class="btn btn-primary" onclick="forceRefresh()">🔄 強制刷新</button>
            </div>
            <div class="text-sm font-bold text-gray-700">
                更新時間: <span id="updateTime">--:--:--</span>
            </div>
        </div>

        <!-- Main Content -->
        <div id="mainContent" class="hidden">
            <!-- Map -->
            <div id="map"></div>

            <!-- Energy Flow Visualization -->
<div class="section-title">⚡ 能源流動視覺化</div>
<div class="flow-chart">
    <!-- Hydro Power Node -->
    <div class="node">
        <div class="node-icon">
            <img src="https://raw.githubusercontent.com/ChiaoYinTu/hrdroviewsys/main/hydro-power.png" alt="Hydro" style="width: 70px; height: 70px;">
        </div>
        <div class="node-content">
            <div class="node-title">微水力發電機<br><span style="font-size: 11px; font-weight: normal;">Hydro Generator</span></div>
            <div class="node-main-value" style="background: rgba(231, 76, 60, 0.15); color: #e74c3c;">
                <div style="font-size: 12px; font-weight: normal; color: #6c757d;">發電量 Production</div>
                <span id="flowProduction">0 W</span>
            </div>
            <div class="node-metric">
                <span class="node-metric-label">電壓 Voltage</span>
                <span class="node-metric-value" id="flowInputV">0 V</span>
            </div>
            <div class="node-metric">
                <span class="node-metric-label">電流 Current</span>
                <span class="node-metric-value" id="flowInputA">0 A</span>
            </div>
        </div>
    </div>

    <div class="arrow"></div>

    <!-- Battery/Control Node -->
    <div class="node">
        <div class="node-icon">
            <div style="display: flex; flex-direction: column; align-items: center; gap: 5px;">
                <img src="https://raw.githubusercontent.com/ChiaoYinTu/hrdroviewsys/main/home-control.png" alt="House" style="width: 55px; height: 55px;">
                <div id="battery">
                    <div id="battery-head"></div>
                    <div id="battery-fill"></div>
                </div>
            </div>
        </div>
        <div class="node-content">
            <div class="node-title">中控室電池<br><span style="font-size: 11px; font-weight: normal;">Control & Battery</span></div>
            <div class="node-main-value" style="background: rgba(39, 174, 96, 0.15); color: #27ae60;">
                <div style="font-size: 12px; font-weight: normal; color: #6c757d;">電池狀態 SOC</div>
                <span id="flowSOC">0%</span>
            </div>
            <div class="node-metric">
                <span class="node-metric-label">電池電壓 Voltage</span>
                <span class="node-metric-value" id="flowBatteryV">0 V</span>
            </div>
        </div>
    </div>

    <div class="arrow"></div>

    <!-- Load Node -->
    <div class="node">
        <div class="node-icon">
            <img src="https://raw.githubusercontent.com/ChiaoYinTu/hrdroviewsys/main/electric-appliances.png" alt="Load" style="width: 75px; height: 75px;">
        </div>
        <div class="node-content">
            <div class="node-title">負載設備<br><span style="font-size: 11px; font-weight: normal;">Load Equipment</span></div>
            <div class="node-main-value" style="background: rgba(243, 156, 18, 0.15); color: #f39c12;">
                <div style="font-size: 12px; font-weight: normal; color: #6c757d;">用電量 Consumption</div>
                <span id="flowConsumption">0 W</span>
            </div>
            <div class="node-metric">
                <span class="node-metric-label">電壓 Voltage</span>
                <span class="node-metric-value" id="flowOutputV">0 V</span>
            </div>
            <div class="node-metric">
                <span class="node-metric-label">電流 Current</span>
                <span class="node-metric-value" id="flowOutputA">0 A</span>
            </div>
        </div>
    </div>
</div>
            </div>

            <!-- Channel 1 Data Cards -->
            <div class="section-title">📊 Channel 1 - 電力參數監控 Power parameter monitoring(Input-DC Output-DC)</div>
            <div class="data-grid">
                <div class="data-card">
                    <div class="data-card-label">⚡ 發電量 </div>
                    <div class="data-card-label">Production</div>
                    <div class="data-card-value" id="metric1Production">0<span class="data-card-unit">W</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">💡 用電量 </div>
                    <div class="data-card-label">Consumption</div>
                    <div class="data-card-value" id="metric1Consumption">0<span class="data-card-unit">W</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">🔌 輸入電壓 </div>
                    <div class="data-card-label">Input Voltage</div>
                    <div class="data-card-value" id="metric1InputV">0<span class="data-card-unit">V</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">⚡ 輸入電流 </div>
                    <div class="data-card-label">Input Current</div>
                    <div class="data-card-value" id="metric1InputA">0<span class="data-card-unit">A</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">🔌 輸出電壓 </div>
                    <div class="data-card-label">Output Voltage</div>
                    <div class="data-card-value" id="metric1OutputV">0<span class="data-card-unit">V</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">⚡ 輸出電流 </div>
                    <div class="data-card-label">Output Current</div>
                    <div class="data-card-value" id="metric1OutputA">0<span class="data-card-unit">A</span></div>
                </div>
            </div>

            <!-- Channel 2 Data Cards -->
            <div class="section-title">🔋 Channel 2 - 電池參數監控 Battery parameter monitoring</div>
            <div class="data-grid">
                <div class="data-card">
                    <div class="data-card-label">🔋 電池荷電狀態</div>
                    <div class="data-card-label">Battery State of Charge</div>
                    <div class="data-card-value" id="metric2SOC">0<span class="data-card-unit">%</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">🔌 電池電壓 </div>
                    <div class="data-card-label">Battery Voltage</div>
                    <div class="data-card-value" id="metric2Voltage">0<span class="data-card-unit">V</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">⚙️ 內阻 </div>
                    <div class="data-card-label">Internal Resistance</div>
                    <div class="data-card-value" id="metric2IntR">0<span class="data-card-unit">Ω</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">⚙️ 熱阻 </div>
                    <div class="data-card-label">Thermal Resistance</div>
                    <div class="data-card-value" id="metric2ThermalR">0<span class="data-card-unit">°C/W</span></div>
                </div>
            </div>

            <!-- Temperature & Flow Monitoring -->
            <div class="section-title">🌡️ 溫度與流量監控 Temperature and Flow Monitoring</div>
            <div class="data-grid">
                <div class="data-card">
                    <div class="data-card-label">🌡️ 電池溫度 </div>
                    <div class="data-card-label">Battery Temperature</div>
                    <div class="data-card-value" id="metric2BatteryT">0<span class="data-card-unit">°C</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">🌡️ 環境溫度 </div>
                    <div class="data-card-label">Ambient Temperature</div>
                    <div class="data-card-value" id="metric2EnvT">0<span class="data-card-unit">°C</span></div>
                </div>
                <div class="data-card">
                    <div class="data-card-label">💧 流量 </div>
                    <div class="data-card-label">Flow Rate</div>
                    <div class="data-card-value" id="metric2Flow">0<span class="data-card-unit">L/min</span></div>
                </div>
            </div>

            <!-- Charts -->
            <div class="section-title">📈 Historical trends</div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="chart-container">
                    <h3 class="text-base font-bold text-gray-700 mb-3">System power generation and consumption trends</h3>
                    <canvas id="powerChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3 class="text-base font-bold text-gray-700 mb-3">Battery SOC Trend</h3>
                    <canvas id="socChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3 class="text-base font-bold text-gray-700 mb-3">Input/output voltage</h3>
                    <canvas id="voltageChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3 class="text-base font-bold text-gray-700 mb-3">Battery health parameter monitoring</h3>
                    <canvas id="resistanceChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3 class="text-base font-bold text-gray-700 mb-3">Temperature monitoring</h3>
                    <canvas id="tempChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3 class="text-base font-bold text-gray-700 mb-3">Flow rate monitoring</h3>
                    <canvas id="flowChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        let config = {
            channelId1: '',
            apiKey1: '',
            channelId2: '',
            apiKey2: '',
            resultsCount: 50
        };

        let charts = {};
        let refreshInterval = 15000;
        let intervalId = null;
        let isMonitoring = false;
        let map = null;

        // Initialize Map
        function initMap() {
            if (map) {
                map.remove();
            }
            map = L.map('map').setView([25.05042495, 121.2570054], 15);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            L.marker([25.05042495, 121.2570054], {
                icon: L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34]
                })
            }).addTo(map).bindPopup('微水力發電站位置');
        }

        // Initialize Charts
        function initCharts() {
            const chartConfig = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#2c3e50',
                            font: { size: 11, weight: 'bold' }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#6c757d',
                            font: { size: 10 }
                        },
                        grid: { color: 'rgba(0,0,0,0.05)' }
                    },
                    y: {
                        ticks: {
                            color: '#6c757d',
                            font: { size: 10 }
                        },
                        grid: { color: 'rgba(0,0,0,0.1)' }
                    }
                }
            };

            charts.power = new Chart(document.getElementById('powerChart'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: '發電量 (W)',
                            borderColor: '#e74c3c',
                            backgroundColor: 'rgba(231, 76, 60, 0.1)',
                            data: [],
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2
                        },
                        {
                            label: '用電量 (W)',
                            borderColor: '#f39c12',
                            backgroundColor: 'rgba(243, 156, 18, 0.1)',
                            data: [],
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2
                        }
                    ]
                },
                options: chartConfig
            });

            charts.voltage = new Chart(document.getElementById('voltageChart'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        { label: '輸入電壓 (V)', borderColor: '#3498db', data: [], tension: 0.4, borderWidth: 2 },
                        { label: '輸出電壓 (V)', borderColor: '#9b59b6', data: [], tension: 0.4, borderWidth: 2 }
                    ]
                },
                options: chartConfig
            });

            charts.soc = new Chart(document.getElementById('socChart'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: 'SOC (%)',
                            borderColor: '#27ae60',
                            backgroundColor: 'rgba(39, 174, 96, 0.1)',
                            data: [],
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2
                        }
                    ]
                },
                options: {
                    ...chartConfig,
                    scales: {
                        ...chartConfig.scales,
                        y: {
                            ...chartConfig.scales.y,
                            max: 100,
                            min: 0
                        }
                    }
                }
            });

            charts.temp = new Chart(document.getElementById('tempChart'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: '電池溫度 (°C)',
                            borderColor: '#e67e22',
                            backgroundColor: 'rgba(230, 126, 34, 0.1)',
                            data: [],
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2
                        },
                        {
                            label: '環境溫度 (°C)',
                            borderColor: '#16a085',
                            backgroundColor: 'rgba(22, 160, 133, 0.1)',
                            data: [],
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2
                        }
                    ]
                },
                options: chartConfig
            });

            charts.resistance = new Chart(document.getElementById('resistanceChart'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: '內阻 (Ω)',
                            borderColor: '#9b59b6',
                            data: [],
                            tension: 0.4,
                            borderWidth: 2,
                            yAxisID: 'y'
                        },
                        {
                            label: '熱阻 (°C/W)',
                            borderColor: '#e74c3c',
                            data: [],
                            tension: 0.4,
                            borderWidth: 2,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    ...chartConfig,
                    scales: {
                        ...chartConfig.scales,
                        y1: {
                            type: 'linear',
                            position: 'right',
                            ticks: {
                                color: '#6c757d',
                                font: { size: 10 }
                            },
                            grid: { display: false }
                        }
                    }
                }
            });

            charts.flow = new Chart(document.getElementById('flowChart'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: '流量 (L/min)',
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.1)',
                            data: [],
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2
                        }
                    ]
                },
                options: chartConfig
            });
        }

        // Update Battery Color
        function updateBatteryColor(soc) {
            const batteryFill = document.getElementById('battery-fill');
            if (soc < 20) {
                batteryFill.style.backgroundColor = '#e74c3c';
            } else if (soc <= 50) {
                batteryFill.style.backgroundColor = '#f39c12';
            } else if (soc <= 80) {
                batteryFill.style.backgroundColor = '#f1c40f';
            } else {
                batteryFill.style.backgroundColor = '#27ae60';
            }
            batteryFill.style.height = soc + '%';
        }

        // Update Status Indicator
        function updateStatus(online) {
            const indicator = document.getElementById('statusIndicator');
            const statusText = document.getElementById('statusText');
            if (online) {
                indicator.className = 'status-indicator status-online';
                statusText.textContent = '線上';
            } else {
                indicator.className = 'status-indicator status-offline';
                statusText.textContent = '離線';
            }
        }

        // Fetch and Update Data
        async function fetchData() {
            try {
                const url1 = `https://api.thingspeak.com/channels/${config.channelId1}/feeds.json?api_key=${config.apiKey1}&results=${config.resultsCount}`;
                const url2 = `https://api.thingspeak.com/channels/${config.channelId2}/feeds.json?api_key=${config.apiKey2}&results=${config.resultsCount}`;

                const [response1, response2] = await Promise.all([
                    fetch(url1),
                    fetch(url2)
                ]);

                if (!response1.ok || !response2.ok) {
                    throw new Error('API request failed');
                }

                const data1 = await response1.json();
                const data2 = await response2.json();

                updateStatus(true);
                updateAllData(data1, data2);

                // Update timestamp
                const now = new Date();
                document.getElementById('updateTime').textContent = now.toLocaleTimeString('zh-TW');

            } catch (error) {
                console.error('Error fetching data:', error);
                updateStatus(false);
                alert('無法從 ThingSpeak 獲取數據，請檢查您的配置');
            }
        }

        // Update All Data
        function updateAllData(data1, data2) {
            if (data1.feeds && data1.feeds.length > 0) {
                const latest1 = data1.feeds[data1.feeds.length - 1];

                const production = parseFloat(latest1.field1) || 0;
                const consumption = parseFloat(latest1.field2) || 0;
                const inputV = parseFloat(latest1.field3) || 0;
                const inputA = parseFloat(latest1.field4) || 0;
                const outputV = parseFloat(latest1.field5) || 0;
                const outputA = parseFloat(latest1.field6) || 0;

                // Update flow chart
                document.getElementById('flowProduction').textContent = production.toFixed(1) + ' W';
                document.getElementById('flowConsumption').textContent = consumption.toFixed(1) + ' W';
                document.getElementById('flowInputV').textContent = inputV.toFixed(1) + 'V';
                document.getElementById('flowInputA').textContent = inputA.toFixed(2) + 'A';
                document.getElementById('flowOutputV').textContent = outputV.toFixed(1) + 'V';
                document.getElementById('flowOutputA').textContent = outputA.toFixed(2) + 'A';

                // Update metrics
                document.getElementById('metric1Production').innerHTML = production.toFixed(1) + '<span class="data-card-unit">W</span>';
                document.getElementById('metric1Consumption').innerHTML = consumption.toFixed(1) + '<span class="data-card-unit">W</span>';
                document.getElementById('metric1InputV').innerHTML = inputV.toFixed(1) + '<span class="data-card-unit">V</span>';
                document.getElementById('metric1InputA').innerHTML = inputA.toFixed(2) + '<span class="data-card-unit">A</span>';
                document.getElementById('metric1OutputV').innerHTML = outputV.toFixed(1) + '<span class="data-card-unit">V</span>';
                document.getElementById('metric1OutputA').innerHTML = outputA.toFixed(2) + '<span class="data-card-unit">A</span>';

                // Update charts
                const times = data1.feeds.map(f => new Date(f.created_at).toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' }));

                charts.power.data.labels = times;
                charts.power.data.datasets[0].data = data1.feeds.map(f => parseFloat(f.field1) || 0);
                charts.power.data.datasets[1].data = data1.feeds.map(f => parseFloat(f.field2) || 0);
                charts.power.update('none');

                charts.voltage.data.labels = times;
                charts.voltage.data.datasets[0].data = data1.feeds.map(f => parseFloat(f.field3) || 0);
                charts.voltage.data.datasets[1].data = data1.feeds.map(f => parseFloat(f.field5) || 0);
                charts.voltage.update('none');
            }

            if (data2.feeds && data2.feeds.length > 0) {
                const latest2 = data2.feeds[data2.feeds.length - 1];

                const soc = parseFloat(latest2.field1) || 0;
                const batteryV = parseFloat(latest2.field2) || 0;
                const intR = parseFloat(latest2.field3) || 0;
                const thermalR = parseFloat(latest2.field4) || 0;
                const batteryT = parseFloat(latest2.field5) || 0;
                const envT = parseFloat(latest2.field6) || 0;
                const flow = parseFloat(latest2.field7) || 0;

                // Update flow chart
                document.getElementById('flowSOC').textContent = soc.toFixed(1) + '%';
                document.getElementById('flowBatteryV').textContent = batteryV.toFixed(1) + 'V';
                updateBatteryColor(soc);

                // Update metrics
                document.getElementById('metric2SOC').innerHTML = soc.toFixed(1) + '<span class="data-card-unit">%</span>';
                document.getElementById('metric2Voltage').innerHTML = batteryV.toFixed(1) + '<span class="data-card-unit">V</span>';
                document.getElementById('metric2IntR').innerHTML = intR.toFixed(3) + '<span class="data-card-unit">Ω</span>';
                document.getElementById('metric2ThermalR').innerHTML = thermalR.toFixed(3) + '<span class="data-card-unit">°C/W</span>';
                document.getElementById('metric2BatteryT').innerHTML = batteryT.toFixed(1) + '<span class="data-card-unit">°C</span>';
                document.getElementById('metric2EnvT').innerHTML = envT.toFixed(1) + '<span class="data-card-unit">°C</span>';
                document.getElementById('metric2Flow').innerHTML = flow.toFixed(2) + '<span class="data-card-unit">L/min</span>';

                // Update charts
                const times2 = data2.feeds.map(f => new Date(f.created_at).toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' }));

                charts.soc.data.labels = times2;
                charts.soc.data.datasets[0].data = data2.feeds.map(f => parseFloat(f.field1) || 0);
                charts.soc.update('none');

                charts.temp.data.labels = times2;
                charts.temp.data.datasets[0].data = data2.feeds.map(f => parseFloat(f.field5) || 0);
                charts.temp.data.datasets[1].data = data2.feeds.map(f => parseFloat(f.field6) || 0);
                charts.temp.update('none');

                charts.resistance.data.labels = times2;
                charts.resistance.data.datasets[0].data = data2.feeds.map(f => parseFloat(f.field3) || 0);
                charts.resistance.data.datasets[1].data = data2.feeds.map(f => parseFloat(f.field4) || 0);
                charts.resistance.update('none');

                charts.flow.data.labels = times2;
                charts.flow.data.datasets[0].data = data2.feeds.map(f => parseFloat(f.field7) || 0);
                charts.flow.update('none');
            }
        }

        // Start Monitoring
        function startMonitoring() {
            config.channelId1 = document.getElementById('channelId1').value.trim();
            config.apiKey1 = document.getElementById('apiKey1').value.trim();
            config.channelId2 = document.getElementById('channelId2').value.trim();
            config.apiKey2 = document.getElementById('apiKey2').value.trim();
            config.resultsCount = parseInt(document.getElementById('resultsCount').value) || 50;

            if (!config.channelId1 || !config.apiKey1 || !config.channelId2 || !config.apiKey2) {
                alert('請填寫所有必要欄位！');
                return;
            }

            // Hide config panel, show main content
            document.getElementById('configPanel').classList.add('hidden');
            document.getElementById('controlsBar').classList.remove('hidden');
            document.getElementById('mainContent').classList.remove('hidden');

            // Initialize map and charts
            initMap();
            initCharts();

            // Start fetching data
            isMonitoring = true;
            fetchData();

            refreshInterval = parseInt(document.getElementById('refreshInterval').value) || 15000;
            intervalId = setInterval(fetchData, refreshInterval);
        }

        // Stop Monitoring
        function stopMonitoring() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
            isMonitoring = false;
            updateStatus(false);

            // Show config panel, hide main content
            document.getElementById('configPanel').classList.remove('hidden');
            document.getElementById('controlsBar').classList.add('hidden');
            document.getElementById('mainContent').classList.add('hidden');
        }

        // Force Refresh
        function forceRefresh() {
            if (isMonitoring) {
                fetchData();
            }
        }

        // Handle refresh interval change
        document.getElementById('refreshInterval').addEventListener('change', function() {
            if (isMonitoring && intervalId) {
                clearInterval(intervalId);
                refreshInterval = parseInt(this.value);
                intervalId = setInterval(fetchData, refreshInterval);
            }
        });
    </script>
</body>
</html>
